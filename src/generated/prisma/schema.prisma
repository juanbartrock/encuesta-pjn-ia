generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Survey {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String?
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  answers     Answer[]
  sections    Section[]
}

model Section {
  id          String     @id @default(cuid())
  title       String
  description String?
  order       Int
  surveyId    String
  questions   Question[]
  survey      Survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@unique([surveyId, order])
}

model Question {
  id            String           @id @default(cuid())
  text          String
  type          QuestionType
  isRequired    Boolean          @default(true)
  order         Int
  placeholder   String?
  sectionId     String
  answerDetails AnswerDetail[]
  section       Section          @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  options       QuestionOption[]

  @@unique([sectionId, order])
}

model QuestionOption {
  id            String         @id @default(cuid())
  text          String
  value         String?
  order         Int
  questionId    String
  answerDetails AnswerDetail[]
  question      Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, order])
}

model Answer {
  id            String         @id @default(cuid())
  surveyId      String
  submittedAt   DateTime       @default(now())
  fingerprint   String
  survey        Survey         @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answerDetails AnswerDetail[]

  @@unique([surveyId, fingerprint])
}

model AnswerDetail {
  id               String          @id @default(cuid())
  answerId         String
  questionId       String
  value            String?
  selectedOptionId String?
  answer           Answer          @relation(fields: [answerId], references: [id], onDelete: Cascade)
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   QuestionOption? @relation(fields: [selectedOptionId], references: [id], map: "answer_detail_selected_option_fk")

  @@index([questionId])
  @@index([selectedOptionId])
}

enum QuestionType {
  TEXT_SHORT
  TEXT_LONG
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  RATING_SCALE
}
